# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QFwMk0GAel6V7l-RQh7jmaCU2HeMcE5t
"""

import pandas as pd

# Load the data
data = pd.read_csv('person_data.csv')

# Initialize a score column if it doesn't exist
if 'Score' not in data.columns:
    data['Score'] = 0

# Initialize a column to track whether a profile has been interacted with
data['Interacted'] = False

def update_scores(profile, like=True):
    # Determine the increment or decrement value
    increment = 1 if like else -1

    # Iterate over each row and update scores based on matching attributes
    for index, other_profile in data.iterrows():
        if other_profile['Interacted']:  # Skip already interacted profiles
            continue
        score_change = 0
        # Compare each attribute except 'Name', 'Score', and 'Interacted'
        for col in data.columns.difference(['Name', 'Score', 'Interacted']):
            if profile[col] == other_profile[col]:
                score_change += increment
        # Update the score
        data.at[index, 'Score'] += score_change

def recommend_next():
    # Filter to only recommend non-interacted profiles
    available_profiles = data[data['Interacted'] == False]
    # Sort data by Score in descending order and return the top profile
    sorted_data = available_profiles.sort_values(by='Score', ascending=False)
    if sorted_data.empty:
        return None
    return sorted_data.iloc[0]  # Return the profile with the highest score

def interact():
    while True:
        top_profile = recommend_next()
        if top_profile is None:
            print("No more profiles available.")
            break
        print(f"Recommended profile: {top_profile['Name']} - {top_profile.drop(['Name', 'Score', 'Interacted']).to_dict()}")
        user_input = input("Do you like this profile? (like or dislike, 'exit' to stop): ")
        if user_input.lower() == 'exit':
            break
        elif user_input.lower() in ['like', 'dislike']:
            update_scores(top_profile, like=(user_input.lower() == 'like'))
            # Mark this profile as interacted
            data.at[top_profile.name, 'Interacted'] = True
        else:
            print("Invalid input. Please enter 'like', 'dislike', or 'exit'.")

        # Save the updated scores to a new file after each interaction
        sorted_profiles = data.sort_values(by='Score', ascending=False)
        sorted_profiles.to_csv('updated_scores.csv', index=False)

if __name__ == '__main__':
    interact()